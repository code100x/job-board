generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  avatar        String?
  isVerified    Boolean   @default(false)
  role          Role      @default(USER)
  emailVerified DateTime?

  jobs       Job[]
  skills     String[]
  experience Experience[]
  project    Project[]
  resume     String?

  oauthProvider  OauthProvider? // Tracks OAuth provider (e.g., 'google')
  oauthId        String?
  createdAt      DateTime       @default(now())
  blockedByAdmin DateTime?
  onBoard        Boolean        @default(false)
  bookmark       Bookmark[]
  company        Company?       @relation("UserCompany")
  companyId      String?        @unique
  education      Education[]
  resumeUpdateDate     DateTime?
  contactEmail String?
  about String?
  discordLink String?
    linkedinLink String?
    twitterLink String?
    githubLink String?
    portfolioLink String?

}

model Company {
  id          String  @id @default(cuid())
  name        String
  logo        String?
  website     String?
  description String?
  jobs        Job[]
  user        User?   @relation("UserCompany", fields: [userId], references: [id])
  userId      String? @unique
}

enum OauthProvider {
  GOOGLE
}

model VerificationToken {
  token      String
  identifier String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType

  @@unique([token, identifier])
}

enum TokenType {
  EMAIL_VERIFICATION
  RESET_PASSWORD
}

model Job {
  id                 String          @id @default(cuid())
  userId             String
  companyId          String
  title              String
  description        String?
  companyName        String          @map("company_name")
  companyBio         String          @map("company_bio")
  companyEmail       String          @map("company_email")
  category           String
  type               EmployementType
  workMode           WorkMode        @map("work_mode")
  currency           Currency        @default(INR)
  city               String
  address            String
  application        String
  companyLogo        String
  skills             String[]
  expired            Boolean         @default(false)
  hasExpiryDate      Boolean         @default(false) @map("has_expiry_date")
  expiryDate         DateTime?
  hasSalaryRange     Boolean         @default(false) @map("has_salary_range")
  minSalary          Int?
  maxSalary          Int?
  hasExperiencerange Boolean         @default(false) @map("has_experience_range")
  minExperience      Int?
  maxExperience      Int?
  isVerifiedJob      Boolean         @default(false) @map("is_verified_job")
  deleted            Boolean         @default(false)
  deletedAt          DateTime?
  postedAt           DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  bookmark Bookmark[]
}

model Bookmark {
  id     String @id @default(uuid())
  jobId  String
  userId String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id                Int             @id @default(autoincrement())
  companyName       String
  designation       String
  EmploymentType    EmployementType
  address           String
  workMode          WorkMode
  currentWorkStatus Boolean
  startDate         DateTime
  endDate           DateTime?
  description       String
  userId            String
  user              User            @relation(fields: [userId], references: [id])
}

model Education {
  id            Int              @id @default(autoincrement())
  instituteName String
  degree        DegreeType
  fieldOfStudy  FieldOfStudyType
  startDate     DateTime
  endDate       DateTime?
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id               Int          @id @default(autoincrement())
  projectName      String
  projectThumbnail String?
  projectSummary   String
  projectLiveLink  String?
  projectGithub    String
  stack            ProjectStack @default(OTHERS)
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  isFeature        Boolean      @default(false)
}

enum ProjectStack {
  GO
  PYTHON
  MERN
  NEXTJS
  AI_GPT_APIS
  SPRINGBOOT
  OTHERS
}

enum Currency {
  INR
  USD
}

enum WorkMode {
  remote
  hybrid
  office
}

enum Role {
  USER
  ADMIN
  HR
}

enum EmployementType {
  Full_time
  Part_time
  Internship
  Contract
}

enum DegreeType {
  BTech
  MTech
  BCA
  MCA
}

enum FieldOfStudyType {
  AI
  Machine_Learning
  CS
  Mechanical
}
